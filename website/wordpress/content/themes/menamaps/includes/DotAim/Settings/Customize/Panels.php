<?php

namespace DotAim\Settings\Customize;

use DotAim\Base\Singleton;
use DotAim\F;

final class Panels extends Singleton
{

	/* ===========================================================================
	 * ---------------------------------------------------------------------------
	 * PROPERTIES - START
	 * ---------------------------------------------------------------------------
	 * ======================================================================== */

	/**
	 * @since 1.0.0
	 */
	public $data = [];

	/* ===========================================================================
	 * ---------------------------------------------------------------------------
	 * PROPERTIES - END
	 * ---------------------------------------------------------------------------
	 * ======================================================================== */



	/* ===========================================================================
	 * ---------------------------------------------------------------------------
	 * GETTERS - START
	 * ---------------------------------------------------------------------------
	 * ======================================================================== */

	/**
	 * @since 1.0.0
	 */
	public function get( $key = null, $refresh = false )
	{

		if ( empty( $this->data ) || $refresh )
		{
			$this->data = [];

			// -----------------------------------------------------------------------

			if ( ! $methods = $this->methods() )
			{
				return;
			}

			// -----------------------------------------------------------------------

			$exclude_methods = [__FUNCTION__];

			foreach ( $methods as $method_name )
			{
				if ( 		in_array( $method_name, $exclude_methods )
						 || F::ends_with( $method_name, '_sanitize_callback' ) )
				{
					continue;
				}

				// ---------------------------------------------------------------------

				if ( ! $item = call_user_func( [ $this, $method_name ] ) )
				{
					continue;
				}

				// ---------------------------------------------------------------------

				// must have fields or callback

				if ( empty( $item['sections'] ) && empty( $item['active_callback'] ) )
				{
					continue;
				}

				// ---------------------------------------------------------------------

				// if empty, set panel slug as method name

				if ( empty( $item['slug'] ) )
				{
					$item['slug'] = $method_name;
				}

				// ---------------------------------------------------------------------

				// title fallback

				if ( empty( $item['title'] ) )
				{
					$item['title'] = F::humanize( $item['slug'], false );
				}

				// ---------------------------------------------------------------------

				$this->data[ $item['slug'] ] = $item;
			}
		}

		// -------------------------------------------------------------------------

		if ( empty( $key ) )
		{
			return $this->data;
		}

		// -------------------------------------------------------------------------

		if ( isset( $this->data[ $key ] ) )
		{
			return $this->data[ $key ];
		}

		// -------------------------------------------------------------------------

		return null;

	}
	// get()

	/* ===========================================================================
	 * ---------------------------------------------------------------------------
	 * GETTERS - END
	 * ---------------------------------------------------------------------------
	 * ======================================================================== */

}
// class Panels
