<?php

namespace DotAim\Base;

use DotAim\F;

abstract class RW_Meta_Box
{

	/* ===========================================================================
	 * ---------------------------------------------------------------------------
	 * ABSTRACT METHODS - START
	 * ---------------------------------------------------------------------------
	 * ======================================================================== */

	/**
	 * @since 1.0.0
	 */
	abstract public function settings();

	/* ===========================================================================
	 * ---------------------------------------------------------------------------
	 * ABSTRACT METHODS - END
	 * ---------------------------------------------------------------------------
	 * ======================================================================== */



	/* ===========================================================================
	 * ---------------------------------------------------------------------------
	 * PROPERTIES - START
	 * ---------------------------------------------------------------------------
	 * ======================================================================== */

	/**
	 * @since 1.0.0
	 */
	protected $core;

	/**
	 * @since 1.0.0
	 */
	public $class_name;

	/**
	 * @since 1.0.0
	 */
	public $settings;

	/**
	 * @since 1.0.0
	 */
	public $post_types;

	/**
	 * @since 1.0.0
	 */
	public $id;

	/**
	 * @since 1.0.0
	 */
	public $title;

	/**
	 * @since 1.0.0
	 */
	public $prefix;
	public $url;
	public $url_dir;
	public $url_assets;
	public $url_css;
	public $url_js;
	public $ajax_action;
	public $ajax_nonce_name;
	public $ajax_nonce;
	public $default_settings;

	/* ===========================================================================
	 * ---------------------------------------------------------------------------
	 * PROPERTIES - END
	 * ---------------------------------------------------------------------------
	 * ======================================================================== */



	/* ===========================================================================
	 * ---------------------------------------------------------------------------
	 * MAGIC METHODS - START
	 * ---------------------------------------------------------------------------
	 * ======================================================================== */

	/**
	 * @since 1.0.0
	 */
	public function __construct( $core )
	{

		$this->core = $core;

		// -------------------------------------------------------------------------

		$this->class_name	= $this->core->NS()->class_name( get_class( $this ) );

		// -------------------------------------------------------------------------

		// url and paths

		// -------------------------------------------------------------------------

		$this->hooks();

	}
	// __construct()

	/* ===========================================================================
	 * ---------------------------------------------------------------------------
	 * MAGIC METHODS - END
	 * ---------------------------------------------------------------------------
	 * ======================================================================== */



	/* ===========================================================================
	 * ---------------------------------------------------------------------------
	 * SETTINGS - START
	 * ---------------------------------------------------------------------------
	 * ======================================================================== */

	/**
	 * @since 1.0.0
	 */
	public function setting( $key )
	{

		return ! empty( $this->settings[ $key ] ) ? $this->settings[ $key ] : '';

	}
	// setting()



	/**
	 * @since 1.0.0
	 */
	protected function default_settings()
	{

		if ( isset( $this->{__FUNCTION__} ) )
		{
			return $this->{__FUNCTION__};
		}

		// -------------------------------------------------------------------------

		$this->{__FUNCTION__} = array(

			// required

			'id'				=> $this->id(),
			'title'			=> $this->title(),

			// -----------------------------------------------------------------------

			// optional

			'post_types'		=> '',
			'context'				=> 'normal',	// normal | advanced | side
			'priority'			=> 'high',		// high | low
			'default_hidden'=> false,
			'autosave'			=> false,

			// -----------------------------------------------------------------------

			'fields' => [],

			// -----------------------------------------------------------------------

			/*
			'validation' => [
				'rules'			=> [],
				'messages'	=> [],
			],
			*/

		);

		// -------------------------------------------------------------------------

		return $this->{__FUNCTION__};

	}
	// default_settings()



	/**
	 * @since 1.0.0
	 */
	public function title()
	{

		if ( isset( $this->{__FUNCTION__} ) )
		{
			return $this->{__FUNCTION__};
		}

		// -------------------------------------------------------------------------

		$this->{__FUNCTION__} = F::humanize( $this->class_name );

		// -------------------------------------------------------------------------

		return $this->{__FUNCTION__};

	}
	// title()



	/**
	 * @since 1.0.0
	 */
	public function id()
	{

		if ( isset( $this->{__FUNCTION__} ) )
		{
			return $this->{__FUNCTION__};
		}

		// -------------------------------------------------------------------------

		$this->{__FUNCTION__} = strtolower(
			$this->core->meta_box_prefix . $this->class_name
		);

		// -------------------------------------------------------------------------

		return $this->{__FUNCTION__};

	}
	// id()



	/**
	 * @since 1.0.0
	 */
	public function prefix()
	{

		if ( isset( $this->{__FUNCTION__} ) )
		{
			return $this->{__FUNCTION__};
		}

		// -------------------------------------------------------------------------

		$this->{__FUNCTION__} = $this->id() . '_';

		// -------------------------------------------------------------------------

		return $this->{__FUNCTION__};

	}
	// prefix()



	/**
	 * @since 1.0.0
	 */
	public function url()
	{

		if ( isset( $this->{__FUNCTION__} ) )
		{
			return $this->{__FUNCTION__};
		}

		// -------------------------------------------------------------------------

		$reflector = new \ReflectionClass( get_class( $this ) );

		$this->{__FUNCTION__} = $this->core->path_to_url( $reflector->getFileName() );

		// -------------------------------------------------------------------------

		return $this->{__FUNCTION__};

	}
	// url()



	/**
	 * @since 1.0.0
	 */
	public function url_dir()
	{

		if ( isset( $this->{__FUNCTION__} ) )
		{
			return $this->{__FUNCTION__};
		}

		// -------------------------------------------------------------------------

		if ( ! $root_url = $this->url() )
		{
			return;
		}

		// -------------------------------------------------------------------------

		$this->{__FUNCTION__} = trailingslashit( dirname( $root_url ) );

		// -------------------------------------------------------------------------

		return $this->{__FUNCTION__};

	}
	// url_dir()



	/**
	 * @since 1.0.0
	 */
	public function url_assets()
	{

		if ( isset( $this->{__FUNCTION__} ) )
		{
			return $this->{__FUNCTION__};
		}

		// -------------------------------------------------------------------------

		if ( ! $root_url = $this->url_dir() )
		{
			return;
		}

		// -------------------------------------------------------------------------

		$this->{__FUNCTION__} = trailingslashit( $root_url . 'assets' );

		// -------------------------------------------------------------------------

		return $this->{__FUNCTION__};

	}
	// url_assets()



	/**
	 * @since 1.0.0
	 */
	public function url_css()
	{

		if ( isset( $this->{__FUNCTION__} ) )
		{
			return $this->{__FUNCTION__};
		}

		// -------------------------------------------------------------------------

		if ( ! $root_url = $this->url_assets() )
		{
			return;
		}

		// -------------------------------------------------------------------------

		$this->{__FUNCTION__} = trailingslashit( $root_url . 'css' );

		// -------------------------------------------------------------------------

		return $this->{__FUNCTION__};

	}
	// url_css()



	/**
	 * @since 1.0.0
	 */
	public function url_js()
	{

		if ( isset( $this->{__FUNCTION__} ) )
		{
			return $this->{__FUNCTION__};
		}

		// -------------------------------------------------------------------------

		if ( ! $root_url = $this->url_assets() )
		{
			return;
		}

		// -------------------------------------------------------------------------

		$this->{__FUNCTION__} = trailingslashit( $root_url . 'js' );

		// -------------------------------------------------------------------------

		return $this->{__FUNCTION__};

	}
	// url_js()

	/* ===========================================================================
	 * ---------------------------------------------------------------------------
	 * SETTINGS - END
	 * ---------------------------------------------------------------------------
	 * ======================================================================== */



	/* ===========================================================================
	 * ---------------------------------------------------------------------------
	 * HOOKS - START
	 * ---------------------------------------------------------------------------
	 * ======================================================================== */

	/**
	 * @since 1.0.0
	 */
	protected function hooks()
	{

		$this->hooks_ajax();

		// -------------------------------------------------------------------------

		// populate settings

		$this->settings();

		// -------------------------------------------------------------------------

		$this->settings = F::parse_args_deep( $this->settings, $this->default_settings() );

		// -------------------------------------------------------------------------

		if ( ! $this->check_required() )
		{
			return;
		}

		// -------------------------------------------------------------------------

		if ( ! $this->check_fields() )
		{
			return;
		}

		// -------------------------------------------------------------------------

		add_filter( 'rwmb_meta_boxes', array( $this, 'rwmb_meta_boxes' ) );

		// -------------------------------------------------------------------------

		// enqueue

		if ( is_callable( [ $this, 'rwmb_enqueue_scripts' ] ) )
		{
			add_action( 'rwmb_enqueue_scripts', [ $this, 'rwmb_enqueue_scripts' ] );
		}

	}
	// hooks()



	/**
	 * @since 1.0.0
	 */
	protected function hooks_ajax()
	{

		$fn_name								= 'ajax_process';
		$this->ajax_action			= "{$this->prefix()}{$fn_name}";
		$this->ajax_nonce_name	= "{$this->ajax_action}_nonce";
		$this->ajax_nonce				= wp_create_nonce( $this->ajax_nonce_name );

		$fn = [ $this, $fn_name ];

		if ( is_callable( $fn ) )
		{
			add_action( "wp_ajax_{$this->ajax_action}", $fn );
		}

	}
	// hooks_ajax()



	/**
	 * @since 1.0.0
	 */
	public function rwmb_meta_boxes( $meta_boxes )
	{

		$meta_boxes[] = $this->settings;

		// -------------------------------------------------------------------------

		return $meta_boxes;

	}
	// rwmb_meta_boxes()

	/* ===========================================================================
	 * ---------------------------------------------------------------------------
	 * HOOKS - END
	 * ---------------------------------------------------------------------------
	 * ======================================================================== */



	/* ===========================================================================
	 * ---------------------------------------------------------------------------
	 * ENQUEUE - START
	 * ---------------------------------------------------------------------------
	 * ======================================================================== */

	/**
	 * @since 1.0.0
	public function rwmb_enqueue_scripts( $RW_Meta_Box )
	{

		// @notes: enqueue scripts and styles here - use it in child class
		// @see: RW_Meta_Box::enqueue()

	}
	// rwmb_enqueue_scripts()
	 */

	/* ===========================================================================
	 * ---------------------------------------------------------------------------
	 * ENQUEUE - END
	 * ---------------------------------------------------------------------------
	 * ======================================================================== */



	/* ===========================================================================
	 * ---------------------------------------------------------------------------
	 * HELPERS - START
	 * ---------------------------------------------------------------------------
	 * ======================================================================== */

	/**
	 * @since 1.0.0
	 */
	protected function __( ...$args )
	{

		return $this->core->__( ...$args );

	}
	// __()



	/**
	 * @since 1.0.0
	 */
	protected function check_required()
	{

		// we need an id

		if ( empty( $this->settings['id'] ) )
		{
			return;
		}

		// -------------------------------------------------------------------------

		// humanize id as title if empty

		if ( empty( $this->settings['title'] ) )
		{
			$this->settings['title'] = F::humanize( $this->settings['id'] );
		}

		// -------------------------------------------------------------------------

		$this->id			= $this->settings['id'];
		$this->title	= $this->settings['title'];

		// -------------------------------------------------------------------------

		return $this->settings;

	}
	// check_required()



	/**
	 * @since 1.0.0
	 */
	protected function check_fields()
	{

		if ( empty( $this->settings['fields'] ) )
		{
			return;
		}

		// -------------------------------------------------------------------------

		foreach ( $this->settings['fields'] as $key => $field )
		{
			if ( empty( $field['type'] ) )
			{
				unset( $this->settings['fields'][ $key ] );

				continue;
			}

			// -----------------------------------------------------------------------

			if ( empty( $field['id'] ) )
			{
				$field['id'] = $key;
			}

			// -----------------------------------------------------------------------

			if ( ! isset( $field['name'] ) )
			{
				$field['name'] = F::humanize( $field['id'] );
			}

			// -----------------------------------------------------------------------

			// add our prefix if not already added

			if ( ! F::starts_with( $field['id'], $this->core->meta_box_prefix ) )
			{
				$field['id'] = $this->prefix() . $field['id'];
			}

			// -----------------------------------------------------------------------

			$this->settings['fields'][ $key ] = $field;
		}

		// -------------------------------------------------------------------------

		return $this->settings['fields'];

	}
	// check_fields()

	/* ===========================================================================
	 * ---------------------------------------------------------------------------
	 * HELPERS - END
	 * ---------------------------------------------------------------------------
	 * ======================================================================== */



	/* ===========================================================================
	 * ---------------------------------------------------------------------------
	 * AJAX RELATED - START
	 * ---------------------------------------------------------------------------
	 * ======================================================================== */

	/**
	 * @internal
	 */
	protected function ajax_user_capability()
	{

		return 'edit_post';

	}
	// ajax_user_capability()



	/**
	 * @internal
	 */
	protected function ajax_required_data()
	{

		// minimum required/expected data

		return [
			'metabox_id',
			'post_id',
		];

	}
	// ajax_required_data()



	/**
	 * @internal
	 */
	protected function ajax_common_checks( $fn, $required_data = null )
	{

		// sanity checks

		if ( 		empty( $_POST )
				 || empty( $_POST['nonce'] )
				 || empty( $_POST['metabox_id'] )
				 || empty( $_POST['post_id'] ) )
		{
			return;
		}

		// -------------------------------------------------------------------------

		$required_data = $required_data ?? $this->ajax_required_data();

		if ( ! empty( $required_data ) )
		{
			foreach ( $required_data as $key )
			{
				if ( ! isset( $_POST[ $key ] ) )
				{
					return new \WP_Error(
						'missing_required_data',
						sprintf( $this->__('Missing Required Data "%s"'), $key )
					);
				}
			}
		}

		// -------------------------------------------------------------------------

		$metabox_id = $_POST['metabox_id'] ?? '';

		if ( $metabox_id !== $this->id() )
		{
			return new \WP_Error(
				'metabox_id_not_equal',
				sprintf(
					$this->__('posted metabox_id "%s" not equal this metabox id "%s"'),
					$metabox_id,
					$this->id()
				)
			);
		}

		// -------------------------------------------------------------------------

		// verify nonce

		if ( ! wp_verify_nonce( $_POST['nonce'], "{$this->ajax_action}_nonce" ) )
		{
			return new \WP_Error(
				'nonce_err',
				$this->__('nonce err')
			);
		}

		// -------------------------------------------------------------------------

		// verify capability

		$capability = $this->ajax_user_capability();

		if ( $capability && ! current_user_can( $capability, $_POST['post_id'] ) )
		{
			return new \WP_Error(
				'permission_err',
				$this->__('permission err')
			);
		}

		// -------------------------------------------------------------------------

		return true;

	}
	// ajax_common_checks()

	/* ===========================================================================
	 * ---------------------------------------------------------------------------
	 * AJAX RELATED - END
	 * ---------------------------------------------------------------------------
	 * ======================================================================== */

}
// class RW_Meta_Box
